#!/bin/bash
# shellcheck disable=SC2086
# Bash API for the Ethereum-Blockchain of aursec
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright (c) 2016-2017 Lukas Krismer and Bennett Piater.

# ensure that an unlocked eth node is running
# for mining ensure that the rpcapi miner is enabled
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o pipefail

# Smart Contract values
CONTRACT_ADDR_HEX="0xf7bb4ee532e0f8a9c2270fb8021f3187a0900da8"
COMMIT_HASH_ADDR_HEX="0xcd79f86d"
GET_HASH_ADDR_HEX="0xac336f7b"
GAS_PRICE="0xba43b7400"
GAS="0x4e381"
MARKER_FOLDER="/var/aursec/markers"

# open rpc port
PORT="8105"

# Makepkg ships lots of useful stuff!
# shellcheck disable=SC1091
source /usr/share/makepkg/util.sh
colorize


# shows usage
function usage() {
    plain "Usage: $0 [-h|--help] [-v|--verbose] ..." >&2
}

#shows help
function help() {
        usage
        cat >&2 <<EOF
Bash API for the Ethereum-Blockchain of aursec

Options:
  -h, --help         Shows this help message
  -v, --verbose      Shows additional output
  -d, --debug            Shows debug output
  mine  start            Starts mining with the coinbase account
        stop             Stops mining with the coinbase account
        auto         Auto-mine. This exists for the systemd timer
        blocks N         mines min. N Blocks with the coinbase account
  get-hash      ID               Gets current consensus-hash of package ID
  commit-hash ID HA  Commits new hash HA of package ID in the blockchain

Copying:
  This is free software licensed under the Mozilla Public License, v. 2.0.
  If a copy of the MPL was not distributed with this file,
  You can obtain one at http://mozilla.org/MPL/2.0/
EOF
}

# trap ... for errorhandling
error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if ((debug)); then
        if [[ -n "$message" ]] ; then
        echo "aursec-chain: Error on or near line ${parent_lineno}: ${message}; use verbose to get more details; exiting with status ${code}" >&2
        else
        echo "aursec-chain: Error on or near line ${parent_lineno}; use verbose to get more details; exiting with status ${code}" >&2
        fi
    else
        echo "aursec-chain: error. For further details activate verbose and debug" >&2
    fi
  exit "${code}"
}

# Checks if the
function is_mining(){
    trap 'error ${LINENO}' ERR
    ((verbose)) && echo "Checking if already mining" >&2
    if curl localhost:${PORT} ${silence} -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0", "method":"eth_mining", "params":[], "id":1}' | grep -q 'true'; then
        ((verbose)) && echo "Is mining" >&2
        echo 1
    else
        ((verbose)) && echo "Is not mining" >&2
        echo 0
    fi
}

# Starts mining via RPC if not already mining
# TO DO: Issue 4 Laptop Battery
function start_mining() {
    trap 'error ${LINENO}' ERR
    declare tmp
    #local cpu_level
    #if acpi -a | grep -q 'on-line'; then
    #       cpu_level=5
    #else
    #       cpu_level=+15
    #fi
    if [[ "$(is_mining)" -eq "0" ]]; then
        ((verbose)) && echo "Starting mining" >&2
        tmp=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0", "method":"miner_start", "params":[], "id":1}')
        ((verbose)) && echo "$tmp" >&2
        touch $MARKER_FOLDER/last-mine.marker
    fi
    #for pid in `pgrep -f "geth.*--datadir $BLOCKCHAIN_PATH"`; do
    #       renice -n ${cpu_level} -p $pid &
    #done

    echo "$tmp" >/dev/null
}

# Stops mining via RPC
function stop_mining() {
    trap 'error ${LINENO}' ERR
    declare tmp
    ((verbose)) && echo "Stopping mining" >&2
    while [[ "$(is_mining)" -eq "1" ]]; do
            tmp=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0", "method":"miner_stop", "params":[], "id":1}')
    done
    ((verbose)) && echo "$tmp" >&2
    echo "$tmp" >/dev/null
}

# Returns Dec number of current block
function get_current_block() {
    trap 'error ${LINENO}' ERR
    declare block_hexnum
    ((verbose)) && echo "Getting current block" >&2
    block_hexnum=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber", "id":1}' | grep -oP '(?<="result".")\w+')
    printf "%d\n" "$block_hexnum"
}

# Mines min. N blocks
# $1 = N
function mine_n_blocks() {
    trap 'error ${LINENO}' ERR
    trap "stop_mining; exit 1" SIGHUP SIGINT SIGTERM
    declare start_block
    ((verbose)) && echo "Starting mining $1 blocks" >&2
    if ! [[ $1 =~ ^[0-9]+$ ]] ; then
        echo "error: 3rd argument ($1) is no number"
        exit 1
    fi

    ((verbose)) && echo "Waiting till no other job is mining" >&2
    while [[ "$(is_mining)" -eq "1" ]]; do
        sleep 0.5
    done
    start_block=$(get_current_block)
    start_mining
    # waiting till N blocks were mined
    while [[ $(get_current_block) < $((start_block + $1)) ]]; do
        if [[ "$(is_mining)" -eq "0" ]]; then
            echo "Something stoped mining" >&2
            exit 1
        fi
        sleep 0.2
    done
    stop_mining
}

function mine_auto() {
    if [[ $(whoami) != aursec ]]; then
        echo "Auto-mining must be done as 'aursec'!" >&2
        exit 1
    fi

    # if the last commit was after the last mine
    if [[ $MARKER_FOLDER/last-commit.marker -nt $MARKER_FOLDER/last-mine.marker ]]; then
        echo "Committed since the last mine, mining more." >&2
        mine_n_blocks 4
    else
        echo "No commits since the last mine, mining one block only." >&2
        mine_n_blocks 1
    fi
}

# Commits Hash into the blockchain
# $1 = ID
# $2 = HASH
function commit_hash() {
    trap 'error ${LINENO}' ERR
    declare tmp offset1 offset2 offset2_dec offset2_hex coinbase string1 string2
    ((verbose)) && echo "Committing Hash $2 of Package $1" >&2
    ((verbose)) && echo "Parsing input to json" >&2
    offset1=$(hex_to_pre_hex32 40)
    string1=$(string_to_hex "$1")
    string2=$(string_to_hex "$2")
    offset2_dec=$((${#string1}/2+64))
    offset2_hex=$(echo "obase=16; $offset2_dec" | bc)
    offset2=$(hex_to_pre_hex32 "$offset2_hex")
    ((verbose)) && echo "Getting coinbase" >&2
    coinbase=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_coinbase", "id":1}' | grep -oP '(?<="result".")\w+')
    ((verbose)) && echo "Sending transaction" >&2
    tmp=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","id":"1","method":"eth_sendTransaction","params":[{"data": "'$COMMIT_HASH_ADDR_HEX$offset1$offset2$string1$string2'","from":"'$coinbase'","gasPrice":"'$GAS_PRICE'","to":"'$CONTRACT_ADDR_HEX'", "gas":"'$GAS'"}]}')
    ((verbose)) && echo "$tmp" >&2
    echo "$tmp" >/dev/null
    touch $MARKER_FOLDER/last-commit.marker
}

# Get Hash (+times submitted) for an ID
# $1 = ID
function get_hash() {
    trap 'error ${LINENO}' ERR
    declare offset string coinbase hex_result
    ((verbose)) && echo "Getting hash of package $ID" >&2
    ((verbose)) && echo "Parsing input to json" >&2
    offset=$(hex_to_pre_hex32 20)
    string=$(string_to_hex "$1")
    ((verbose)) && echo "get coinbase" >&2
    coinbase=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_coinbase", "id":1}'  | grep -oP '(?<="result".")\w+')
    ((verbose)) && echo "send call" >&2
    hex_result=$(curl localhost:${PORT} ${silence} -m 30 -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0", "method":"eth_call", "params":[{"from": "'$coinbase'", "to": "'$CONTRACT_ADDR_HEX'", "data": "'$GET_HASH_ADDR_HEX$offset$string'"},"latest"], "id":1}' |grep -oP '(?<="result"."0x)\w+')
    if [ ${#hex_result} -le 0 ]; then
        echo "Error: Connection Failed" >&2
        exit 1
    fi
    if [ ${#hex_result} -le 192 ]; then
        echo null 0
    else
        declare num_of_commits_dec hash_size_dec hash_printable hash_
        ((verbose)) && echo "Parsing result to strings" >&2

        num_of_commits_dec=$(printf "%d\n" "$(cut -c65-128 <<< "$hex_result")")
        hash_size_dec=$((($(cut -c129-192 <<< "$hex_result" | sed 's/^0*//')-1)*2))
        hash_printable=$(sed 's/.\{2\}/\\x&/g' <<< "$(cut -c193-$((193+hash_size_dec-1)) <<< "$hex_result")")
        hash_=$(echo -e "$hash_printable")

        echo "$hash_ $num_of_commits_dec"
    fi
    echo "$tmp" >/dev/null
}

# convert String to hex-string (Ethereum ABI-style)
# $1 = String
function string_to_hex() {
    declare hexstring
    hexstring=$(xxd -pu <<< "$1" | sed ':a;N;$!ba;s/[[:space:]]//g')
    echo "$(hex_to_pre_hex32 "$((${#hexstring}/2))")$(hex_to_post_hex32 "$hexstring")"
}

# converts hex-String to hexstring with length%32byte==0 the prestring is filled with 0s
# $1 = input hexstring
function hex_to_pre_hex32() {
    echo "$(printf "%$((64-${#1}%64))s" | tr " " "0")$1"
}

# converts hex-String to hexstring with length%32byte==0 the poststring is filled with 0s
# $1 = input hexstring
function hex_to_post_hex32() {
        echo "$1$(printf "%$((64-${#1}%64))s" | tr " " "0")"
}

# Parse the arguments
verbose=0
debug=0
silence='-s'
while true; do
    case "$1" in
        -v|--verbose)
            verbose=1
            silence='-sS'
            shift
            ;;
        -d|--debug)
            debug=1
            shift
            ;;
        -h|--help)
            help
            exit 0 ;;
        *) break ;;
    esac
done

# main
case "$1" in
    mine)
        case "$2" in
            start)
                start_mining ;;
            stop)
                stop_mining ;;
            auto)
                mine_auto ;;
            blocks)
                mine_n_blocks "$3";;
            *) usage;;
        esac ;;
    commit-hash)
        commit_hash "$2" "$3";;
    get-hash)
        get_hash "$2";;
    *) usage ;;
esac
exit 0

#!/bin/bash
# shellcheck disable=SC2046,SC2016
# Calculate the canonical id and hash of given package directories.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright Â© 2016-2017 Lukas Krismer and Bennett Piater.
set -e -o pipefail
readonly BASEDIR="$PWD"
readonly firejail_opts=(--quiet --noprofile --read-only=/ --nogroups --seccomp --shell=none --caps.drop=all)

# Makepkg ships lots of useful stuff!
source /usr/share/makepkg/util.sh
colorize

function usage() {
	plain "Usage: $0 [-h|--help] [BUILD_DIR ...]" >&2
}

function help() {
	usage
	cat >&2 <<EOF
Compute identifiers and hashes for given package sources.
If BUILD_DIR is not set, or -, read from STDIN.
Output pairs of ID, HASH for each package on STDOUT.

Options:
  -h, --help         Show this help message.
  -v, --verbose      Show additional output.
  -d, --debug        Show all individual hashes on stderr.
  -n, --novcs        Do not download VCS sources.

Copying:
  This is free software licensed under the Mozilla Public License, v. 2.0.
  If a copy of the MPL was not distributed with this file,
  You can obtain one at http://mozilla.org/MPL/2.0/
EOF
}

# Output the recursive hashes of a VCS dir
# $@: vcs dirs
function vcs_hash() {
	# TODO: ignore the .folders of all VCS supported by makepkg

	find "$@" -not -path '*/.git*' \
	 -not -path '*/.svn*' \
	 -not -path '*/.hg*' \
	 -not -path '*/.bzr*' \
	 -type f -readable \
	 -exec sha256sum "{}" \;

}

# Output the hashes of build files
# $1: build dir
function basic_hash() {
	cd_safe "$1"

	# Patches and install scripts
	find . -maxdepth 1 \( -name .SRCINFO \
	 -o -name \*.patch -o -name \*.install \) \
	 -exec sha256sum "{}" +

	# PKGBUILD without comments TODO: what else could be improved here? Maybe sorting - but how to make that work with scripts?
	sed "s/#.*//" PKGBUILD | sha256sum -
}

# $1: build dir
function hash_pkg() {
	# Check whether the build directory is valid
	if [[ ! -r "$1/PKGBUILD" || ! -r "$1/.SRCINFO" ]]; then
		error "$1 is not a valid build directory!" >&2
		exit 1
	fi

	# Get the package id
	cd_safe "$1"
	PKGID=$(firejail "${firejail_opts[@]}" --whitelist="$(pwd)" bash -c 'source PKGBUILD && echo $pkgname-$pkgver-$pkgrel')

	# Check if it's a vcs package
	vcs_dirs=( $(aursec-parse-srcinfo .SRCINFO) )

	if (( ${#vcs_dirs[@]} )); then
		((no_vcs)) && error "VCS dir found, but --novcs was specified!" && exit 1

		if ((verbose)); then
			echo "Downloading VCS sources with makepkg..." >&2
			firejail "${firejail_opts[@]}" --whitelist="$(pwd)" --read-write="$(pwd)" bash -c 'makepkg -od --noprepare --nosign 2>/dev/null'
		else
			firejail "${firejail_opts[@]}" --whitelist="$(pwd)" --read-write="$(pwd)" bash -c 'makepkg -od --noprepare --nosign >/dev/null 2>&1'
		fi

		#                                Prepend 'src/' to every vcs dir
		HASH=$({ basic_hash .; vcs_hash "${vcs_dirs[@]/#/src/}"; } | sort | $debug_cmd | sha256sum | cut -d " " -f 1)
	else
		HASH=$(basic_hash . | sort | $debug_cmd | sha256sum | cut -d " " -f 1)
	fi

	cd_safe "$BASEDIR"
	echo "$PKGID" "$HASH"
}

# Parse the arguments
while true; do
    case "$1" in
        -)
			explicit_stdin=1
			shift
            break ;;
        -v|--verbose)
			verbose=1
			shift
			;;
		-d|--debug)
			debug=1
			shift
			;;
		-n|--novcs)
			no_vcs=1
			shift
			;;
        -h|--help)
            help
            exit 0 ;;
        *) break ;;
    esac
done

# Don't wait for input on stdin if stdin is a tty and the user didn't add a -
if (( $# == 0 )) && { (( explicit_stdin != 1 )) && tty -s; }; then
    usage
    exit 1
fi

if ((debug)); then
	debug_cmd="tee /dev/stderr"
else
	debug_cmd="cat"
fi

# Either use all remaining arguments, or read from stdin
if (($#)); then
	for pkg_dir in "$@"; do
		hash_pkg "$pkg_dir";
	done
else
	while IFS=$'\n' read -r pkg_dir; do
		hash_pkg "$pkg_dir"
	done
fi

exit 0

# Useful packages to test this script:
# ecwolf-hg
# 2bwm-git
# alan-bzr
# caff-svn
# cloc-svn
# pidgin-hg

#!/bin/bash
# shellcheck disable=SC2046,SC2016
# Calculate the canonical id and hash of given package directories.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright Â© 2016-2017 Lukas Krismer and Bennett Piater.
set -e -o pipefail
declare -i vcs_enabled=0
readonly BASEDIR="$PWD"

# Makepkg ships lots of useful stuff!
source /usr/share/makepkg/util.sh
colorize

function usage() {
	plain "usage: $0 [-h] [--] [BUILD_DIR]" >&2
	exit 1
}

# Output the recursive hashes of a VCS dir
# $1: vcs dir
function vcs_hash() {
	# TODO: ignore the .folders of all VCS supported by makepkg
	cd_safe "$1"

	find . \( -path \*.git\* -o -path \*.hg\* \) -prune \
	 -o -type f -readable \
	 -exec sha256sum "{}" \;

	cd_safe "$BASEDIR"
}

# Output the hashes of build files
# $1: build dir
function basic_hash() {
	cd_safe "$1"

	# Patches and install scripts
	find . \( -name .SRCINFO \
	 -o -name \*.patch -o -name \*.install \) \
	 -exec sha256sum "{}" +

	# PKGBUILD without comments TODO: what else could be improved here? Maybe sorting?
	sed "s/#.*//" PKGBUILD | sha256sum -

	cd_safe "$BASEDIR"
}

# $1: build dir
function hash_pkg() {
	# Check whether the build directory is valid
	if [[ ! -r "$1/PKGBUILD" || ! -r "$1/.SRCINFO" ]]; then
		error "$1 is not a valid build directory!" >&2
		exit 1
	fi
	local build_dir="$1"
	cd_safe "$build_dir"
	PKGID=$(firejail --quiet --read-only=/ --nogroups --seccomp --caps.drop=all bash -c 'source PKGBUILD && echo $pkgname-$pkgver-$pkgrel')

	# Calculate the hash
	if ((vcs_enabled)); then # TODO: actually handle VCS packages. That requires detecting them and the cloned source folder, and that they were cloned... :/
		HASH=$({ basic_hash .; vcs_hash "$vcs_dir"; } | sort | sha256sum | cut -d " " -f 1)
	else
		HASH=$(basic_hash . | sort | sha256sum | cut -d " " -f 1)
	fi

	cd_safe "$BASEDIR"
	echo "$PKGID" "$HASH"
}

# Parse the arguments
while true; do
    case "$1" in
        --|-) shift
            break ;;
        -h|--help)
            usage ;;
        *) break ;;
    esac
done

# Either use all remaining arguments, or read from stdin
if (($#)); then
	for pkg in "$@"; do
		hash_pkg "$pkg";
	done
else
	while IFS=$'\n' read -r pkg; do
		hash_pkg "$pkg"
	done
fi

exit 0

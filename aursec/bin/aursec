#!/bin/bash
# Primary executable for the aursec project.
# It checks a downloaded build directory against what other users submitted to the blockchain,
# and submits the hash if the user deems it correct.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright Â© 2016-2017 Lukas Krismer and Bennett Piater.
readonly BASEDIR="$PWD"
declare -ri EINIT=64 ENOHASH=65 ECHAIN=66 ENOMATCH=67
set -o pipefail # Receive error codes from _within_ pipes

function usage() {
    plain "usage: $0 [-h|--help] [-cvs] [--] [BUILD_DIR]" >&2
}

function help() {
    usage
    cat >&2 <<EOF
TODO TODO TODO
TODO TODO TODO
TODO TODO TODO
TODO TODO TODO
TODO TODO TODO
TODO TODO TODO
EOF
}

# Requires $pkg_hash, $cons_h, $cons_c, $match
function show_hashes() {
    msg2 "Local hash: $pkg_hash"
    msg2 "Consensus:  $cons_h with $cons_c submissions"
    ((match)) && plain "The hashes match."
}

function manual_override() {
    ((status_only)) || read -rp $'Continue anyway? [y]es, [w]ithout submitting, [N]o\n> ' </dev/tty

    if [[ "$REPLY" == "y" ]]; then
        # TODO: submit hash
        return 0
    elif [[ "$REPLY" == "w" ]]; then
        return 0
    else
        exit $ENOMATCH
    fi
}

# Requires $pkg_id, $pkg_hash, $thresh, $cons_h, $cons_c, $match
function state_machine() {
    thresh=${thresh:-42} # TODO: load this from config file
    if [[ $cons_c -eq 0 ]]; then
        # No hash in the blockchain
        ((status_only)) || warning "No hash for $pkg_id was found in the blockchain."
        manual_override

    elif [[ $cons_c -lt $thresh ]]; then
        # Count below threshold
        ((status_only)) || warning "Consensus count $cons_c for $pkg_id is below the threshold of $thresh!"
        ((status_only)) || show_hashes
        manual_override

    else
        # Count above or equal to threshold
        if [[ "$cons_h" == "$pkg_hash" ]]; then
            # Matching hashes
            ((verbose)) && msg "Hash for $pkg_id matches the consensus."
            # TODO: submit hash
            return 0

        else
            # No match
            ((status_only)) || error "Hash for $pkg_id doesn't match the consensus!"
            ((status_only)) || show_hashes
            manual_override
        fi
    fi
}

# Makepkg ships lots of useful stuff!
source /usr/share/makepkg/util.sh
colorize

# Parse the arguments TODO: use getopts instead
declare -i verbose check_only
while true; do
    case "$1" in
        --) shift
            break ;;
        -) shift
           explicit_stdin=1
           break ;;
        -h|--help)
            help
            exit 0 ;;
        -v|--verbose)
            verbose=1
            shift ;;
        -c|--check-only)
            check_only=1
            shift ;;
        -s|--status-only)
            status_only=1
            shift ;;
        *) break;;
    esac
done

# Don't wait for input on stdin if stdin is a tty and the user didn't add a -
if (( $# == 0 )) && { (( explicit_stdin != 1 )) && tty -s; }; then
    usage
    exit 1
fi

###############################################
# Read the result of the processing pipeline. #
###############################################
while read -r -u4 pkg_id pkg_hash cons_h cons_c match; do
    if [[ -z "$pkg_id" || -z "$pkg_hash" || -z "$cons_h" || -z "$cons_c" || -z "$match" ]]; then
        error "Received invalid data from aursec-verify!"
        exit 1
    fi

    state_machine

# This will automagically use all remaining arguments, or read from stdin
# Our stdin attaches to aursec-hash, and the loop reads from the pipeline.
done 4< <(aursec-hash "$@" | aursec-verify-hashes)

exit 0

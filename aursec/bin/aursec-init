#!/bin/bash
# Initialize a ethereum blockchain and creates account
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright (c) 2016-2017 Lukas Krismer and Bennett Piater.
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

BLOCKCHAIN_PATH="/var/aursec"
GENESIS_BLOCK="/usr/share/aursec/genesis_block.json"

function usage() {
	plain "Usage: $0 [-h|--help]" >&2
}

function help() {
	usage
	cat >&2 <<EOF
Initialize a Ethereum Blockchain and generates a new account.

Options:
  -h, --help         Show this help message.
  -v, --verbose      Show additional output.

Copying:
  This is free software licensed under the Mozilla Public License, v. 2.0.
  If a copy of the MPL was not distributed with this file,
  You can obtain one at http://mozilla.org/MPL/2.0/
EOF
}

# Creates blockchain and account
function init(){
	declare tmp
	((verbose)) && echo "Creating directory." >&2
	mkdir -p $BLOCKCHAIN_PATH

	mkdir $BLOCKCHAIN_PATH/markers
	touch $BLOCKCHAIN_PATH/markers/{last-commit.marker,last-mine.marker}

	chmod -R 755 $BLOCKCHAIN_PATH
	chmod 666 $BLOCKCHAIN_PATH/markers/last-commit.marker
	chmod 666 $BLOCKCHAIN_PATH/markers/last-mine.marker
	chown -R aursec:aursec $BLOCKCHAIN_PATH

	# check if genesis block exists
	((verbose)) && echo "Looking for genesis block" >&2
	if [ ! -e "$GENESIS_BLOCK" ]; then
		echo "The genesis block does not exist" >&2
		exit 3
	fi
	# init blockchain
	((verbose)) && echo "Creating Blockchain." >&2
	tmp=$(su aursec -c "geth --datadir $BLOCKCHAIN_PATH/chain init $GENESIS_BLOCK "  2>&1)
	((verbose))&& echo "$tmp" >&2
	# generate password
	((verbose)) && echo "Generating random password." >&2
	tmp=$(su aursec -c "dd if=/dev/urandom count=20 | sha256sum | base64 | head -c 32 > ${BLOCKCHAIN_PATH}/password " 2>&1)
	((verbose))&& echo "$tmp" >&2
	# new blockchain account
	((verbose)) && echo "Creating new account." >&2
	tmp=$(su aursec -c "geth --password ${BLOCKCHAIN_PATH}/password --datadir $BLOCKCHAIN_PATH/chain account new " 2>&1)
	((verbose))&& echo "$tmp" >&2

	# Give everything except for the markers folder mode 700
	find $BLOCKCHAIN_PATH -maxdepth 1 -mindepth 1 -not -name '*markers*' -not -name '.' -exec chmod -R 700 '{}' \;

	# Generate DAG
	((verbose)) && echo "Creating DAG." >&2
	tmp=$(su aursec -c "mkdir ${BLOCKCHAIN_PATH}/.ethash")
	((verbose))&& echo "$tmp" >&2
	su aursec -c "geth makedag 360000 ${BLOCKCHAIN_PATH}/.ethash" 2>&1
	tmp=$(systemctl start aursec-blockchain.service 2>&1)
	((verbose))&& echo "$tmp" >&2
	tmp=$(aursec-chain -v -d mine blocks 2 2>&1)
	((verbose))&& echo "$tmp" >&2
	if [[ $(aursec-chain get-hash "hello world") == "it works"* ]]; then
		echo "Error: couldn't synchronize with the network" >&2
		tmp=$(systemctl stop aursec-blockchain.service 2>&1)
		((verbose))&& echo "$tmp" >&2
		exit 3
	fi
	tmp=$(systemctl stop aursec-blockchain.service 2>&1)
	((verbose))&& echo "$tmp" >&2

}



# Parse the arguments
while true; do
    case "$1" in
        -v|--verbose)
			verbose=1
			shift
			;;
        -h|--help)
            help
            exit 0 ;;
        *) break ;;
    esac
done

if [ "$EUID" -ne 0 ]; then
	echo "Please run this script as root."
	exit 2
fi

((verbose)) && echo "Checking if $BLOCKCHAIN_PATH already exists."

if [ -d $BLOCKCHAIN_PATH ]; then
	read -rp "The Path $BLOCKCHAIN_PATH already exists. Do you want to delete all existing Files in this Folder? [y/N]" yn
	case $yn in
		y|Y )
			rm -rf $BLOCKCHAIN_PATH
			init;;
		* )
			echo "Canceled the blockchain initialization."
			exit 1
	esac

else
	init
fi
echo "Initialization of the blockchain was successful. Please start the systemd service. The following synchronisation will take a while."
exit 0

#!/bin/bash
# Initialize a ethereum blockchain and creates account
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# Copyright (c) 2016-2017 Lukas Krismer and Bennett Piater.
PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

BLOCKCHAIN_PATH="/var/aursec"
GENESIS_BLOCK="/usr/share/aursec/genesis_block.json"
PORT="8105"
LOGFILE="aursec-init.log"

function usage() {
    plain "Usage: $0 [-h|--help]" >&2
}

function help() {
    usage
    cat >&2 <<EOF
Initialize a Ethereum Blockchain and generates a new account.

Options:
  -h, --help         Show this help message.
  -v, --verbose      Show additional output.

Copying:
  This is free software licensed under the Mozilla Public License, v. 2.0.
  If a copy of the MPL was not distributed with this file,
  You can obtain one at http://mozilla.org/MPL/2.0/
EOF
}

# trap ... for errorhandling
error() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if ((debug)); then
        if [[ -n "$message" ]] ; then
        echo "aursec-chain: Error on or near line ${parent_lineno}: ${message}; use verbose to get more details; exiting with status ${code}" >&2
        else
        echo "aursec-chain: Error on or near line ${parent_lineno}; use verbose to get more details; exiting with status ${code}" >&2
        fi
    else
        echo "aursec-chain: error. For further details activate verbose and debug" >&2
    fi
  exit "${code}"
}

# Returns Dec number of current block
function get_current_block() {
    trap 'error ${LINENO}' ERR
    declare block_hexnum
    ((verbose)) && echo "Getting current block" >&2
    block_hexnum=$(curl localhost:${PORT} "${silence}" -m 30 -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber", "id":1}' | grep -oP '(?<="result".")\w+')
    printf "%d\\n" "$block_hexnum"
}

# Creates blockchain and account
function init(){
    trap 'error ${LINENO}' ERR
    declare tmp per
    ((verbose)) && echo "Creating directory." >&2
    mkdir -p $BLOCKCHAIN_PATH

    mkdir $BLOCKCHAIN_PATH/markers
    touch $BLOCKCHAIN_PATH/markers/{last-commit.marker,last-mine.marker}

    chmod -R 755 $BLOCKCHAIN_PATH
    chmod 666 $BLOCKCHAIN_PATH/markers/last-commit.marker
    chmod 666 $BLOCKCHAIN_PATH/markers/last-mine.marker
    chown -R aursec:aursec $BLOCKCHAIN_PATH

    # check if genesis block exists
    ((verbose)) && echo "Looking for genesis block" >&2
    if [ ! -e "$GENESIS_BLOCK" ]; then
        echo "The genesis block does not exist" >&2
        exit 3
    fi
    # init blockchain
    ((verbose)) && echo "Creating Blockchain." >&2
    tmp=$(su aursec -c "geth --datadir $BLOCKCHAIN_PATH/chain init $GENESIS_BLOCK "  2>&1)
    ((verbose))&& echo "$tmp" >&2
    # generate password
    ((verbose)) && echo "Generating random password." >&2
    tmp=$(su aursec -c "dd if=/dev/urandom count=20 | sha256sum | base64 | head -c 32 > ${BLOCKCHAIN_PATH}/password " 2>&1)
    ((verbose))&& echo "$tmp" >&2
    # new blockchain account
    ((verbose)) && echo "Creating new account." >&2
    tmp=$(su aursec -c "geth --password ${BLOCKCHAIN_PATH}/password --datadir $BLOCKCHAIN_PATH/chain account new " 2>&1)
    ((verbose))&& echo "$tmp" >&2

    # Give everything except for the markers folder mode 700
    find $BLOCKCHAIN_PATH -maxdepth 1 -mindepth 1 -not -name '*markers*' -not -name '.' -exec chmod -R 700 '{}' \;

    # Generate DAG
    tmp=$(su aursec -c "mkdir ${BLOCKCHAIN_PATH}/.ethash")
    ((verbose))&& echo "$tmp" >&2
    tmp=$(sudo systemctl start aursec-blockchain 2>&1)
    ((verbose))&& echo "$tmp" >&2
    ((verbose))&& echo "Generate backup DAG" >&2
    su aursec -c "geth makedag 0 ${BLOCKCHAIN_PATH}/.ethash >${BLOCKCHAIN_PATH}/${LOGFILE} 2>&1 &"
    per="0"
    sleep 10
    while (("$per"!="100")) ;do
        per=$(grep -oP '(?<=percentage=)\w+' ${BLOCKCHAIN_PATH}/${LOGFILE} | tail -1)
        if (("$per"=="99"));then
            per="100"
        fi
        tmp="Generate DAG: $per% \\r"
        echo -ne "$tmp" >&2
    done
    echo "" >&2

    echo "Wait for synchronisation" >&2
    while [[ $(get_current_block) -le 5 ]]; do
        sleep 15
    done

    ((verbose))&& echo "synched" >&2


    echo "á¸¾ine 2 blocks (This will take a few minutes)" >&2
    aursec-chain -v -d mine blocks 2 >${BLOCKCHAIN_PATH}/${LOGFILE} 2>&1 &
    per="0"
    sleep 10
    while (("$per"!="100")) ;do
        per=$(sudo journalctl -eu aursec-blockchain | grep -oP '(?<=percentage=)\w+' | tail -1)
        if (("$per"=="99"));then
            per="100"
        fi
        tmp="Generate DAG: $per% \\r"
        echo -ne "$tmp" >&2
    done
    echo "" >&2

    wait
    ((verbose))&& cat ${BLOCKCHAIN_PATH}/${LOGFILE} >&2
    ((verbose))&& echo "mined blocks" >&2
    tmp=$(systemctl stop aursec-blockchain.service 2>&1)
    ((verbose))&& echo "$tmp" >&2
    sudo rm ${BLOCKCHAIN_PATH}/${LOGFILE}

}



# Parse the arguments
silence='-s'
while true; do
    case "$1" in
        -v|--verbose)
            verbose=1
            debug=1
            silence='-sS'
            shift
            ;;
        -h|--help)
            help
            exit 0 ;;
        *) break ;;
    esac
done

if [ "$EUID" -ne 0 ]; then
    echo "Please run this script as root."
    exit 2
fi

((verbose)) && echo "Checking if $BLOCKCHAIN_PATH already exists."

if [ -d $BLOCKCHAIN_PATH ]; then
    read -rp "The Path $BLOCKCHAIN_PATH already exists. Do you want to delete all existing Files in this Folder? [y/N]" yn
    case $yn in
        y|Y )
            rm -rf $BLOCKCHAIN_PATH
            init;;
        * )
            echo "Canceled the blockchain initialization."
            exit 1
    esac

else
    init
fi
echo "Initialization of the blockchain was successful."
exit 0
